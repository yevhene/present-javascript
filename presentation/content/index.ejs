<section>
  <h1>Чому JavaScript?</h1>

  <small>
    Yevhen Shemet<br />
    github: <a target="_blank" rel="nofollow noopener" href="https://github.com/yevhene/present-javascript">yevhene/present-javascript</a>
  </small>
</section>

<section>
  <h2>Чому JavaScript?</h2>

  <section>
    <h3>JavaScript у Браузері</h3>

    <h4>Єдина доступна мова*</h4>
  </section>

  <section>
    <h3>JavaScript на Мобільних</h3>

    <img src="images/javascript-mobile.gif" />
  </section>

  <section>
    <h3>JavaScript на Робочому столі</h3>

    <img src="images/javascript-desktop.gif" />
  </section>

  <section>
    <h3>JavaScript у Віртуальній реальності</h3>

    <img src="images/javascript-virtual-reality.gif" />
  </section>

  <section>
    <h3>JavaScript на Пристроях</h3>

    <img src="images/javascript-hardware.gif" />
  </section>

  <section>
    <h3>JavaScript ...</h3>

    <ul>
      <li>в Базах Даних</li>
      <li>в Терміналі</li>
      <li>на Сервері</li>
      <li>в Іграх</li>
      <li>...</li>
    </ul>
  </section>
</section>

<section>
  <h2>Що таке JavaScript?</h2>

  <section>
    <p><strong>JavaScript</strong> - високорівнева, інтерпретована мова програмування що керується специфікацією ECMAScript. Її характеризують, як динамічну, слабко типізовану, прототипну і мультипарадигмальну.</p>
  </section>

  <section>
    <p><strong>Високорівнева</strong> - нам не доведеться керувати пам'яттю та іншими апаратними ресурсами.</p>

    <small>На противагу мові C або мові асемблеру, що потребують безпосереднього керування пам'яттю і тому вважаються <i>низькорівневими</i>.</small>
  </section>

  <section>
    <p><strong>Iнтерпретована</strong> - немає необхідності компілювати перед запуском, перетворенням программи у машинні коди займається спеціальна програма <i>Інтерпретатор</i>, що починає свою роботу під час запуску програми.</p>

    <small>На відміну від мов C або Haskell, що потребують попередньої компіляції і тому називаються <i>компільованими</i>.</small>
  </section>

  <section>
    <p><strong>Динамічна</strong> - дозволяє визначати типи даних і здійснювати синтаксичний аналіз і компіляцію «на льоту», безпосередньо на етапі виконання.</p>

    <small><i>Статичні</i> мови C++ або Java - потребують визначення типів заздалегідь.</small>
  </section>

  <section>
    <p><strong>Слабко типізована</strong> - за рахунок можливості неявного приведення типів.</p>

    <small>На противагу мовам із <i>сильною типізацією</i>, таким як Python або Java, що не дозволяють неявного приведення типів.</small>
  </section>

  <section>
    <p><strong>Прототипна</strong> - що використовує Прототипи (замість Класів), як основу для Об'єктно-Орієнтованого Програмування.</p>

    <small>На відміну від мов C++ та Java що використовую Класи, як основу для ООП.</small>
  </section>

  <section>
    <p><strong>Мультипарадигмальна</strong> - що використовує різні парадигми, як засади до розвитку мови.</p>

    <ul>
      <li><strong>Процедурна</strong> - програми будуються на основі Процедур та Функцій;</li>
      <li><strong>Об'єктно-Орієнована</strong> - реалізує ООП на базі Прототипів;</li>
      <li><strong>Функціональна</strong> - Функції першого класу та Функції вищих порядків.</li>
    </ul>
  </section>
</section>

<section>
  <h2>Чому не люблять JavaScript?</h2>

  <section>
    <img src="images/good-parts.jpeg">
  </section>

  <section>
    <h3>IEEE 754</h3>

    <pre><code class="javascript hljs" data-trim contenteditable>
0.1 + 0.2 === 0.3 → false // ???
    </code></pre>

    <pre class="fragment"><code class="javascript hljs" data-trim contenteditable>
0.1 + 0.2 → 0.30000000000000004
    </code></pre>
  </section>

  <section>
    <h3>ToPrimitive</h3>

    <pre><code class="javascript hljs" data-trim contenteditable>
[] + [] → "" // Empty string? These are arrays!
[] + {} → "[object object]"
{} + [] → 0 // Why isn't the operation commutative???
    </code></pre>
  </section>

  <section>
    <h3>sort</h3>

    <pre><code class="javascript hljs" data-trim contenteditable>
[1,5,20,10].sort() → [1, 10, 20, 5] // Why is it sorting strings???
    </code></pre>
  </section>

  <section>
    <h3>Чому так?</h3>

    <ul>
      <li>JavaScript розроблявся, як мова для "непрограмістів", яку легко було б вивчати і користуватись;</li>
      <li>JavaScript - це стандарт, який реалізують багато різних конкуруючих компаній;</li>
      <li>Помилки в стандарті майже неможливо виправити, тому що є вже написаний код, що враховує існуючі помилки;</li>
      <li>Довгий час стандарт встановлював "де факто" <i>Internet Explorer</i> від <i>Microsoft</i>.</li>
    </ul>
  </section>
</section>

<section>
  <h2>Історія</h2>

  <section>
    <h3>Створення</h3>

    <ul>
      <li><b>1995</b> - <i>Брендан Айк</i> розробив для компанії <i>Netscape</i>, мову програмування <i>Mocha</i>, пізніше <i>LiveScript</i>, і через деякий час нарешті <i>JavaScript</i> (за згодою <i>Sun Microsystems</i>, що в результаті залишає за собою права на назву <i>JavaScript</i>);</li>
      <li><b>1996</b> - за домовленістю між <i>Netscape</i> і <i>Microsoft</i> стандарт називають <i>ECMAScript</i>. Створюється TC39;</li>
      <li><b>1997</b> - виходить версія 1.0;</li>
    </ul>
  </section>

  <section>
    <h3>Розвиток</h3>

    <ul>
      <li><b>1998</b> - 2.0: стандартизація ISO;</li>
      <li><b>1999</b> - 3.0: Регулярні вирази, обробки винятків, додаткові можливості;</li>
    </ul>
  </section>

  <section>
    <h3>Стагнація</h3>

    <ul>
      <li><b>2000</b> - Dot-com boom</li>
      <li><b>2001</b> - замість повноцінної <i>4.0</i> версії стандарту, випускають урізану <i>5.1</i>. <i>Microsoft</i> з <i>Internet Eplorer</i> захоплює ринок браузерів. Розвиток стандарту <i>ECMAScript</i> припиняється на 14 років;</li>
    </ul>
  </section>

  <section>
    <h3>AJAX</h3>

    <ul>
      <li><b>1999</b> - <i>Microsoft</i> додає до <i>Internet Eplorer</i> можливість обміну даних в фоні, за допомогою <i>XMLHttpRequest</i>;</li>
      <li><b>2005</b> - цю можливість знаходить <i>Google</i> і сворює на її базі <i>Google Maps</i>, в результаті технологію називають <i>AJAX</i>;</li>
    </ul>
  </section>

  <section>
    <h3>jQuery</h3>

    <ul>
      <li><b>2006</b> - щоб згладити числені помилки стандарту виникає безліч бібліотек, в результаті найпопулярнішою стає <i>jQuery</i>;</li>
    </ul>
  </section>

  <section>
    <h3>node.js</h3>

    <ul>
      <li><b>2008</b> - <i>Google</i> для свого браузера <i>Chrome</i> створює рушій <i>V8</i>, що може швидко винонувати <i>JavaScript</i> програми. Це дозволило випустити <i>Gmail</i>;</li>
      <li><b>2009</b> - <i>Ryan Dahl</i> використовує бібліотеку, для запуску <i>JavaScript</i> на сервері. В результаті виникає <i>node.js</i>;</li>
    </ul>
  </section>

  <section>
    <h3>Криза</h3>

    <ul>
      <li><b>2009</b> - Світова фінансово-економічна криза;</li>
      <li><b>2010</b> - Компанія <i>Sun Microsystems</i> завершує своє існування. Права на назву <i>JavaScript</i> переходять до <i>Oracle</i>;</li>
    </ul>
  </section>

  <section>
    <h3>Експансія</h3>

    <ul>
      <li><b>2009</b> - <i>PhoneGap</i> дозволяє використовувати <i>JavaScript</i> для мобільних аплікацій;</li>
      <li><b>2013</b> - <i>Github Electron</i> дозволяє використовувати <i>JavaScript</i> для настільних аплікацій;</li>
      <li><b>2015</b> - <i>React Native</i> наближає мобільні аплікації створені за допомогою <i>JavaScript</i> до нативних.</li>
    </ul>
  </section>
</section>

<section>
  <h2>Сучасний стан</h2>

  <section>
    <h3>Сучасні версії</h3>

    <table>
      <thead>
        <tr><th>Версія</th><th>Дата</th><th>Зміни</th></tr>
      </thead>

      <tbody>
        <tr><td>6</td><td>2015</td><td>Класи, модулі, генератори, ітератори, деструкція, обіцянки</td></tr>
        <tr><td>-</td><td>2016</td><td>Експонента **, includes</td></tr>
        <tr><td>-</td><td>2017</td><td>async/await, SIMD</td></tr>
        <tr><td>-</td><td>2018</td><td>rest/spread properties, асинхронна ітерація</td></tr>
        <tr><td>-</td><td>2019</td><td>Array.flat, String.trimStart</td></tr>
      </tbody>
    </table>
  </section>

  <section>
    <h3>Пропозиції</h3>

    <a href="https://github.com/tc39/proposals">https://github.com/tc39/proposals</a>
  </section>

  <section>
    <h3>Траспіляція (transpile)</h3>

    <p>Перетворення коду в код на іншій мові, одного рівня абстракції.</p>

    <ul>
      <li>Babel - популярний інструмент транспіляції JavaScript нової версії, в більш стару</li>
      <li>TypeScript - статично типізована мова схожа на JavaScript</li>
    </ul>
  </section>
</section>

<section>
  <h2>То чому ж все таки?</h2>

  <section>
    <h3>JavaScript - швидкий</h3>
  </section>

  <section>
    <h3>JavaScript - популярний</h3>

    <img src="images/javascript-popularity.webp" />
  </section>

  <section>
    <h3>JavaScript - має велику інфраструктуру</h3>

    <p><i>npm</i> містить <i>1.081.587</i> пакетів</p>
  </section>

  <section>
    <h3>JavaScript - все ще молодий</h3>

    <ul>
      <li>Активно розвивається;</li>
      <li>Потребує все більше і більше людей.</li>
    </ul>
  </section>

  <section>
    <h3>JavaScript - відкритий</h3>

    <a href="https://github.com/tc39/proposals">https://github.com/tc39/proposals</a>
  </section>

  <section>
    <h3>Одна мова</h3>

    <ul>
      <li>Одна мова для команди на сервері, браузері і мобільних;</li>
      <li>Перевикористання коду на всіх платформах.</li>
    </ul>
  </section>

  <section>
    <h3>Ви все одно нікуди не дінетесь від JavaScript</h3>
  </section>
</section>

<section>
  <h2>Посилання</h2>

  <ul>
    <li><a href="http://speakingjs.com/es5/ch06.html">Speaking JavaScript: An In-Depth Guide for Programmers, Dr. Axel Rauschmayer, Chapter 6. Historical JavaScript Milestones</a></li>
  </ul>
</section>

<section>
  <h2>Питання?</h2>
</section>
